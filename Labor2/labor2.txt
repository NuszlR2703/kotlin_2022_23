import IDictionary.Companion.PATH
import java.io.File
import java.util.*
import javax.swing.JToolBar.Separator

interface IDictionary{
    fun add(word: String):Boolean
    fun find(word: String):Boolean
    fun size():Int

    companion object{
        val PATH=""F:\IV. EV\Android\kotlin_2022_23\Labor2\\src\\main\\resources\\dict.txt"
    }
}

object ListDictionary : IDictionary {
    private val words = mutableListOf<String>()

    init {
        File(PATH).forEachLine { add(it) }
    }

    override fun add(word: String):Boolean{
       return words.add(word)
    }
    override fun find(word: String):Boolean{
        return words.find { it == word } != null}
    override fun size(): Int {
        return words.size
    }
}
object TreeSetDictionary : IDictionary{
    private val words = TreeSet<String>()

    init {
        File(PATH).forEachLine { add(it) }
    }

    override fun add(word: String):Boolean{
        return words.add(word)
    }
    override fun find(word: String):Boolean{
        return words.find { it == word } != null}
    override fun size(): Int {
        return words.size
    }
}

object HashSetDictionary : IDictionary{
    private val words = HashSet<String>()

    init {
        File(PATH).forEachLine { add(it) }
    }

    override fun add(word: String):Boolean{
        return words.add(word)
    }
    override fun find(word: String):Boolean{
        return words.find { it == word } != null}
    override fun size(): Int {
        return words.size
    }
}
enum class DictionaryType{
    ARRAY_LIST,
    TREE_SET,
    HASH_SET
}

class DictionaryProvider{
    companion object{
        fun createDictionary(type: DictionaryType): IDictionary{
            return when(type){
                DictionaryType.ARRAY_LIST ->ListDictionary
                DictionaryType.TREE_SET->TreeSetDictionary
                DictionaryType.HASH_SET->HashSetDictionary
            }
        }
    }
}
fun String.createMonogram(): String {
    return this.split(" ").map{it[0]}.joinToString("")
}

fun List<String>.joinToString(separator: String): String {
    return this.joinToString(separator) { it }
}

fun List<String>.longestString(): String {
    return this.map { it }.maxByOrNull { it }.toString()
}


//problem 3 functions

data class Date(val year: Int, val month: Int, val day: Int) : Comparable<Date>{
    override fun compareTo(other: Date): Int {
        if (this.year > other.year) return 1
        if (this.year < other.year) return -1
        if (this.month > other.month) return 1
        if (this.month < other.month) return -1
        if (this.day > other.day) return 1
        if (this.day < other.day) return -1
        return 0
    }

}
fun Date.isLeap(): Boolean = this.year % 4 == 0 || (this.year % 100 == 0 && this.year % 400 == 0)

val months = listOf(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)

fun Date.isValid(): Boolean {
    if (this.month == 2 && this.isLeap() && this.day <= 29) return true
    return this.day <= months[month - 1]
}

class DateComparator : Comparator<Date> {
    override fun compare(o1: Date?, o2: Date?): Int {
        if (o1 == null || o2 == null) return 0
        if (o1.day >= o2.day) return 1
        return -1
    }
}
fun Date.random(){
    val dates: MutableList<Date> = mutableListOf()
    while (dates.size < 5) {
        val date = Date((1900..2022).random(), (1..12).random(), (1..31).random());
        date.isValid() && dates.add(date)
    }
     dates.forEach { date -> println(date) }
}
fun Date.randomPrint(dates: MutableList<Date>) {
  val dates: MutableList<Date> = mutableListOf()
  while (dates.size < 5) {
        val date = Date((1900..2022).random(), (1..12).random(), (1..31).random());
        date.isValid() && dates.add(date)
    }
  dates.forEach { date -> println(date) }
}

//main

fun main() {
    //problem 1
   //val dict: IDictionary = ListDictionary
    //val dict: IDictionary = TreeSetDictionary
   /* val dict: IDictionary = DictionaryProvider.createDictionary(DictionaryType.HASH_SET)
    println("Number of words: ${dict.size()}")
    var word: String?
    while(true){
        print("What to find? ")
        word = readLine()
        if( word.equals("quit")){
            break
        }
        println("Result: ${word?.let { dict.find(it) }}")
    }*/
    //problem 2
    val stringList = listOf("apple", "pear", "melon")
    val stringList2 = listOf("apple", "pear", "melon", "strawberry")
    println("JOHN SMITH".createMonogram())

    println(stringList.joinToString("#"))

    println(stringList2.longestString())

	
  //problem 3
    val dates: MutableList<Date> = mutableListOf()
    while (dates.size < 5) {
        val date = Date((1900..2022).random(), (1..12).random(), (1..31).random());
        date.isValid() && dates.add(date)
    }
	println(dates)

    println("After sort: ")
    dates.sort()
    println(dates)


    println("After reverse: ")
    dates.reverse()
    println(dates)

    println("Ordered by day: ")
    dates.sortWith(DateComparator())
    println(dates)

}